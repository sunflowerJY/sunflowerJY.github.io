<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[打造个性化的博客]]></title>
    <url>%2F2018%2F05%2F15%2F%E6%89%93%E9%80%A0%E4%B8%AA%E6%80%A7%E5%8C%96%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[在上篇博文中已经搭建好一个基础的可用的博客了，但是热爱折腾的我们怎么可能就此满足😎此文将介绍我的博客折腾之路~ 环境 系统：Win10 64位 Git: 2.17.0.windows.1 Node.js: 8.11.1 npm: 5.6.0 Hexo: 3.7.1 Next: 5.1.4 Next主题 选择一个自己可心的主题，会增强更博的动力哟😜 下载Next主题 在Git bash终端执行以下命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 本文使用的是Next: 5.1.4，目前已经更新至6.0,由于自己还是新手，基本搭建过程都是参考大神博客的，所以以后熟练了再更新吧😂 下载成功后可以在本地博客站点的主题文件夹/themes中除了默认的landscape文件夹，还多了一个next文件夹。 使用Hexo搭建博客时，由于在多个文件夹中存放了_config.yml配置文件，为表述方便，规定： 1.站点配置文件：sunflowerJY.github.io/_config.yml 2.主题配置文件：sunflowerJY.github.io/themes/next/_config.yml 启用Next主题 打开站点配置文件，找到theme字段，并将其值更改为 next。 1theme: next 预览Next风格的本地博客 在Git bash终端执行： 1hexo s 不知为何，我的hexo命令在站点文件夹以外的目录使用会报错找不到该命令，故我都会在站点根目录执行上述命令。 在浏览器中访问 http://localhost:4000/ 便可预览本地博客效果。❤️ 修改Next主题的Scheme Next主题的默认Scheme是Muse,即为http://localhost:4000/ 看到的效果。本博客使用的是Pisces，可修改主题配置文件中的Scheme字段： 1scheme: Pisces 修改网站的基本信息 修改站点配置文件： 12345678# Sitetitle: 向日葵的自留地subtitle:description:keywords:author: sunflowerJYlanguage: zh-hans #汉语timezone: 修改微博底部添加访客数 themes/next/layout/_partials/footer.swig删除多余信息，保留如下信息： 1234567891011121314151617181920212223&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;copyright&quot;&gt;&#123;##&#125;&#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;&#123;##&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;&#123;##&#125;&lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt; &lt;span class=&quot;with-love&quot;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright || config.author &#125;&#125;&lt;/span&gt; &#123;% if theme.post_wordcount.totalcount %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-area-chart&quot;&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_wordcount.item_text %&#125; &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&apos;post.totalcount&apos;) &#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;span title=&quot;&#123;&#123; __(&apos;post.totalcount&apos;) &#125;&#125;&quot;&gt;&#123;# #&#125;&#123;&#123; totalcount(site, &apos;0,0.0a&apos;) &#125;&#125;&#123;# #&#125;&lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt; 添加访客数信息，可直接在上述代码下方，添加： 12345&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 简化后的微博底部效果如下： 添加头像 修改主题配置文件中的avatar,值设置为头像的链接： 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gif（新建 uploads 目录若不存在）avatar: /images/avatar.jpg 配置完成部署更新后便可以在HOME页看到自己的头像啦😃 设置网站图标 将图片在ico图片生成网站上分别生成16x16和32x32的图表，并改名为favicon-16x16-sunflower.ico和favicon-32x32-sunflower.ico，并放到/themes/next/source/images中，修改主题配置文件的small和medium字段： 1234567favicon: small: /images/favicon-16x16-sunflower.ico medium: /images/favicon-32x32-sunflower.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 效果如图： 添加动态背景 Next主题版本》=5.1.1可以直接在主题配置文件修改： 12# Canvas-nestcanvas_nest: true ## 添加顶部加载条 修改`主题配置文件`将`pace: false`改为`pace: true`，还可以换不同风格的加载条： ## 添加分类和标签 分类(Categories)和标签(tags)能够很好得将博客文章进行分类管理，方便查阅归类。 ### 添加分类 在博客文件夹下，执行： 1hexo new page categories 自动在/source/categories/文件下创建index.md文件: 1234 ---title: 分类date: 2018-05-15 15:39:08--- 如果有集成评论服务，分类页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，修改后的index.md： 123456---title: 分类date: 2018-05-15 15:39:08type: &quot;categories&quot;comments: false--- 修改菜单： 在菜单中添加链接。编辑主题配置文件， 添加categories到menu中，如下: 1234menu: home: / archives: /archives categories: /categories 添加标签 在博客文件夹下，执行： 1hexo new page tags 自动在/source/tags/文件下创建index.md文件: 1234 ---title: 标签date: 2018-05-15 15:39:08--- 如果有集成评论服务，标签页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，修改后的index.md： 123456---title: 标签date: 2018-05-15 15:39:08type: &quot;tags&quot;comments: false--- 修改菜单： 在菜单中添加链接。编辑主题配置文件， 添加tags到menu中，如下: 1234menu: home: / archives: /archives categories: /tags 修改标签图标 Next主题中设置了标签后，默认在文章最底部显示#，后面接文章所有的标签。总是觉得#这个标识丑丑的😂😂😂还是改一下吧 修改/themes/next/layout/_macro/post.swig： 搜索rel=&quot;tag&quot;&gt;#,将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;， 效果图： 添加本地搜索 安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-search --save 编辑站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： 1234local_search: enable: true trigger: auto top_n_per_article: 1 修改首页摘要 修改主题配置文件： 123auto_excerpt: enable: true length: 150 修改文内链接式样 在/themes/next/source/css/_common/components/post/post.styl文末添加： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #FF6600; border-bottom: none; border-bottom: 1px solid #FF6600; &amp;:hover &#123; color: #FF6600; border-bottom: none; border-bottom: 1px solid #FF6600; &#125;&#125; 其中，.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义，效果如图： 添加emoji表情包 把原来的hexo渲染换成基于markdown-it的渲染: 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 在站点根目录node_modules\hexo-renderer-markdown-it\下安装markdown-it-emoji插件： 1npm install markdown-it-emoji --save 编辑站点配置文件，添加如下内容： 12345678910111213141516171819202122# markdown-it配置emoji表情包markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji #用emoji插件 anchors: level: 1 collisionSuffix: &apos;v&apos; permalink: true permalinkClass: header-anchor permalinkSymbol: &apos;&apos; 然后就可以在写博的时候加上emoji表情啦😄 添加Gitment评论系统 注册OAuth Application 登陆Github官网，进入https://github.com/settings/developers: 点击绿色Register a new application，填写以下内容： 点击绿色Register application,可获得Client ID、Client Secret。 创建Github仓库 创建一个仓库存放评论，仓库名：gitment-comments 修改主题配置文件 12345678910111213141516# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: true mint: true count: true lazy: false cleanly: false language: github_user: sunflowerJY #Github用户名 github_repo: gitment-comments #仓库名 client_id: 5321cd82f4205f8b784e client_secret: 50caad7a61fb5f6d84fc9a66653e6ff625d1db57 proxy_gateway: redirect_protocol: 上述信息中除了github_user、github_repo、client_id、client_secret需要注意外，其他信息均可默认不改。 部署到博客查看效果： 1hexo d 初始化本文的评论页 使用评论功能要登陆Github账号，登陆后点击初始化本文的评论页。 💔由于文章标题过长的原因，可能会报错Error：validation failed: 修改/themes/next/layout/_third-party/comments/gitment.swig文件中标亮的代码： 用文章的时间替代标题标识评论，避免了标题超出50个字符的问题。 管理评论 在gitment-comments的Issues中可以集中管理博客所有文章的评论。 添加萌宠 给孤独写博人来个伴儿吧😬这里有各种各样的宠物,pick一个心水的萌宠吧😉 安装模块： 1npm install --save hexo-helper-live2d 下载一个宠物包, 以我博客中的黑猫为例： 1npm install live2d-widget-model-hijiki 站点配置文件中添加以下字段： 1234567891011121314151617# live2d live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-hijiki/ display: position: left width: 80 height: 300 hOffset: 20 #水平相对位移 vOffset: -200 #垂直相对位移 mobile: show: true 其中，注意model.use填写自己下载的宠物包名字。 Hexo-admin一站式写博部署 写第一篇博文的时候，总是纠结困惑排版的问题，网上也有很多推荐的Markdown编辑器，但是由于种种原因，和部署到Github Pages还是会有很多本地没有出现的问题。直到偶然之间，发现Hexo-admin这个插件，可以直接在本地http://localhost:4000/admin/ 写博客，并实时查看排版效果，比如我正在书写的这篇博文： 点击红圈的位置，可以实现实时本地预览： 一键式部署到Github Pages,还可以顺带部署信息，方便以后版本查阅: 是不是和Github Pages用起来无缝连接😉以下实现步骤： 安装插件： 1npm install --save hexo-admin 本地运行,打开http://localhost:4000/admin/ ： 1hexo server -d 💔上述的Deploy可能第一次使用会报错，解决方案如下： 编辑站点配置文件，搜索admin字段修改如下： 123# hexo-admin admin.deployCommandadmin: deployCommand: &apos;sh hexo-deploy.sh&apos; 在站点根目录下新建hexo-deploy.sh文件，内容如下： 1hexo g -d 编辑站点根目录下node_modules/hexo-admin/deploy.js文件，修改标亮处： 1var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]); ## 安装图床插件 目前上传图片至千牛网生成外链，复制到博客的html语言生成图片，知道有`hexo-qiniu-sync`这么一个插件能够化繁为简，去除重复劳动，使得在博客中添加图片更方便。但是一直安装配置存在问题，导致该插件无法使用，并且导致基本的`hexo-clean`、`hexo s`等命令也报错。 很无奈，未完待续。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages + Hexo + Next搭建博客填坑实记]]></title>
    <url>%2F2018%2F05%2F13%2FGithub-Pages-Hexo-Next%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91%E5%AE%9E%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[背景 从实习结束，开始正儿八经看论文的时候，开始萌生了写博的想法。研一寒假在家不想看论文刷LeetCode的时候，学习了很多大神优秀的解法，却奈何下次遇到类似的方法还是困惑，便想找个地儿记录下来。 一开始选择了博客网站——类似博客园或者CSDN之类的，图形界面，操作简便，但存在广告，排版杂乱的问题。无疑之间发现了Markdown——写博利器，简洁明了，兼容Jupyter Notebook，同时显示代码和文字说明，非常适合数据分析工作。 这是我的博客成品：https://sunflowerjy.github.io/ 搭建此博客步骤很简单，顺利的话最快半小时就能搭建成功。然而标题是填坑实记，一看就是有故事的人😑故事听我娓娓道来~ 环境 系统：Win10 64位 Git: 2.17.0.windows.1 Node.js: 8.11.1 npm: 5.6.0 Hexo: 3.7.1 30分钟搭建最基础博客 写在最前面，提示：此步骤只适合环境与我一样，因为之前我也是参考别人分享的博文，然而由于各种软件的更新导致很多步骤都会报错，所以后期有可能由于软件更新而导致按照本文的方法安装配置出现错误。 安装Git Git的下载地址(Windows版本)：https://git-scm.com/download/win 选择适合自己系统的版本。 除了以下两个步骤以外，都可以默认选择Next(下一步): 如何使用Git? 标注 1：仅使用 Git Bash 进行操作； 标注 2：在选择使用 Git Bash 进行操作的同时，也可以使用 Windows 命令行操作，建议选择此项； 标注 3：在选择使用 Git 的同时，也把 Unix 工具加入到了我们的配置之中，而且此操作会覆盖 Windows 的一些工具，强烈不建议选择此项。 关于回车换行的问题 Dos和Windows采用回车+换行CRLF表示下一行，而Unix/Linux采用换行符LF表示下一行。 第一个选项是默认检查Windows风格的文件，并在提交时转换为Unix风格。 请选择第三项。如果默认选择第一项，在git中提交代码可能会报错。不过可以安装好之后再更改相关配置。若后续commit报错请参考搭建博客遇到的各种坑的详细介绍。 检验Git是否安装成功： 安装成功后，可以在桌面鼠标右键找到Git bash： 安装Node.js Node.js下载地址：https://nodejs.org/en/download/ 选择自己对应系统的版本。一路默认Next安装。 新版本的Node.js中集成了npm工具，故不需要再另外安装。 检验Node.js和npm是否安装成功： 安装Hexo 1npm install hexo-cli -g 检验Hexo是否安装成功： 本地搭建博客 在本地计算机新建一个文件夹存放博客代码： 1hexo init sunflowerJY.github.io 我存放博客代码的文件夹名：sunflowerJY.github.io 生成静态文件： 1hexo g # 或者hexo generate 在sunflowerJY.github.io文件夹下生成public文件夹存放静态文件。 启动本地Web服务： 1hexo s # 或者hexo server 现在可以在本地查看自己搭建的博客啦😃http://localhost:4000 关联Github 注册Github账号 Github官网：https://github.com/ 注册过程跟大部分网站相似，尤其注意注册邮箱(user.email)和用户名(user.name),后期部署博客要用到并且必须一字不差，这也是遇到的坑之一😂 用户名： 创建Github仓库 创建Github仓库来远程保存备份本地的博客代码。 这里再强调下，仓库名必须命名为用户名.github.io，之前由于我没有严格遵守用户名这一点，导致部署到Github的博客css等文件无法识别😩折腾了好久还是别人帮我检查到的😂 由于我的博客仓库已经搭建过所以提示报错已存在该仓库，新创建的不会报错。 开启Github Pages功能 打开博客仓库的Setting页面： 拉至Github Pages选项，将Source选择master分支： 可能会提示仓库为空，要先添加文件，请将本地的博客push到该远程仓库。熟悉Git命令的请跳过，否则参考上传本地博客仓库至远程仓库 配置Git账号信息 设置git的全局账号信息，user.name为Github用户名，user.email为Github注册邮箱。 12git config --global user.name &quot;&lt;your name&gt;&quot;git config --global user.email &quot;&lt;your email&gt;&quot; 查看Git的所配置信息： 1git config --list 配置SSH 查看本地的SSH Key，桌面右键进入Git bash： 1ls -al ~/.ssh 若有id_rsa和id_rsa.pub两个文件，则复制id_rsa.pub中内容至Github设置中。 New SSH Key: 将id_rsa.pub中的内容复制到Key中： 验证SSH是否配置成功： 1ssh -T git@github.com 成功的话会显示以下的大致内容： 123456The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;github.com,192.30.252.128&apos; (RSA) to the list of known hosts.Hi sunflowerJY! You&apos;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 上传本地博客仓库至远程仓库 在Git bash中cd到本地博客文件夹sunflowerJY.github.io： 123git initgit add .git commit -m &quot;first commit blog&quot; 修改配置文件部署部分 修改本地博客文件夹sunflowerJY.github.io中的_config.yml： 其中，repo填写自己的仓库地址，主要修改对应的用户名位置。 安装Deploy工具 1npm install hexo-deployer-git --save 部署至Github 1hexo d#deploy 至此已经成功搭建了自己的博客，快去查看自己的专属博客吧💕https://用户名.github.io 搭建博客遇到的各种坑 其实在上一节30分钟搭建最基础博客中基本都已经提及了，现在来总结下吧 关于回车换行的问题 上一节在安装Git中提到过，由于Windows和Linux的换行规则不一样，所以为了确保在将Windows平台上的文件commit至Github时能正常使用，Git给出了自动转换文件格式的服务，即下图中的第一个选项。若默认选择了这项Next,后序在使用Git的过程中可能会报crlf与lf文件转换的WARN。 解决方案： 如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中： 1git config --global core.autocrlf false Github仓库名 Github仓库名必须以用户名.github.io的形式命名，用户名那里要一字不差，不然后期的css等文件渲染会有问题，一开始我没注意到这个问题导致博客打开傻眼了，白花花的一片只有字😱💥😢 开启Github Pages功能 如果仓库内没有文件，页面上会提示无法开启Github Pages功能，可以参照上传本地博客仓库至远程仓库。随即仓库中有文件后，便可开启Github Pages功能。 搭建博客遇到的各种坑这块内容我会一直保持更新。随时记录，方便有需要的人，也方便自己备忘😂 关于博客的内容后续还会更新，例如打造个性化的博客,如有需要请关注教程标签。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
