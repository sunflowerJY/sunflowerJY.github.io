<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[机器学习入门]]></title>
    <url>%2F2018%2F08%2F01%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[TensorFlow TensorFlow是一个机器学习框架，它提供了一门机器学习速成课程。 官方网址：https://developers.google.cn/machine-learning/crash-course/ Google出品还是十分值得信赖的。 线性回归 基本概念 下图展示了蟋蟀每分钟的鸣叫声与温度（摄氏度）的关系。 为了清楚地显示鸣叫声与温度之间的关系，创建公式： $$y=mx+b$$ 其中： $y$:指的是温度（以摄氏度表示），即我们试图预测的值。 $m$:指的是直线的斜率。 $x$:指的是每分钟的鸣叫声次数，即输入特征的值。 $b$:指的是 y 轴截距。 将上面代数公式，转换为机器学习样式的方程： $$y^{’}=b+w_{1}x_{1}$$ 其中： $y_{’}$:指的是预测标签（理想输出值）。 $b$:指的是偏差（y 轴截距）。而在一些机器学习文档中，它称为 。 $w_{1}$:指的是特征 1 的权重。权重与上文中用 表示的“斜率”的概念相同。 $x_{1}$:指的是特征（已知输入项）。 延伸到多个特征的情况： $$y^{’}=b+w_{1}x_{1}+w_{2}x_{2}+w_{3}x_{3}$$ 损失 平方损失 平方损失又叫$L_{2}$损失。 红色箭头表示损失 蓝线表示预测 单个样本的平方损失： $$(y - y{’}){2}$$ 均方误差 均方误差 (MSE) 指的是每个样本的平均平方损失。 $$MSE=\frac{1}{N} \sum_{(x,y) \in D} {(y-prediction(x))^{2}}$$ 其中： $(x,y)$指的是样本，其中: $x$指的是模型进行预测时使用的特征集（例如，温度、年龄和交配成功率。 $y$指的是样本的标签(例如，每分钟的鸣叫次数)。 $prediction(x)$指的是权重和偏差与特征集$x$结合的函数。 $D$指的是包含多个有标签样本(即$(x,y)$)的数据集。 $N$指的是$D$中的样本数量。 虽然 MSE 常用于机器学习，但它既不是唯一实用的损失函数，也不是适用于所有情形的最佳损失函数。 降低损失 迭代方法 下图显示了机器学习算法用于训练模型的迭代试错过程： 我们应该为$b$和$w_{1}$设置哪些初始值？ $$y^{’}=b+w_{1}x_{1}$$ 通过迭代方式来降低损失，就是不停的试错，直到得到损失最小的模型。 梯度下降法 根据迭代算法的思想，计算所以也$w_{1}$所有可能值的损失。 损失与$w_{1}$的图形始终是凸形的，随着$w_{1}$的增大，损失从大变小，再变大的一个过程。 凸形问题只有一个最低点；即只存在一个斜率正好为 0 的位置。这个最小值就是损失函数收敛之处。 通过计算整个数据集中 每个可能值的损失函数来找到收敛点这种方法效率太低。 我们来研究一种更好的机制，这种机制在机器学习领域非常热门，称为梯度下降法。 梯度下降法算法会沿着负梯度的方向走一步，以便尽快降低损失。 梯度矢量具有方向和大小。梯度下降法算法用梯度乘以一个称为学习速率（有时也称为步长）的标量，以确定下一个点的位置。 如果您选择的学习速率过小，就会花费太长的学习时间。 相反，如果您指定的学习速率过大，下一个点将永远在 U 形曲线的底部随意弹跳，就好像量子力学实验出现了严重错误一样。 随机梯度下降法 在梯度下降法中，批量指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。 包含随机抽样样本的大型数据集可能包含冗余数据。实际上，批量大小越大，出现冗余的可能性就越高。一些冗余可能有助于消除杂乱的梯度，但超大批量所具备的预测价值往往并不比大型批量高。 如果我们可以通过更少的计算量得出正确的平均梯度，会怎么样？通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法 (SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。 小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。]]></content>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark入门]]></title>
    <url>%2F2018%2F07%2F29%2FSpark%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[继Spark安装教程之后，这是一篇Spark入门教程，记录我学习Spark的思路。 背景： 使用Python、Pandas、Numpy学习机器学习、数据分析、数据挖掘 论文瓶颈之时，偶然决定学习Spark，算是真正入了大数据的门，毕竟符合了数据量“大”的要求 RDD、DataFrame、Datasets 安装配置完Spark相关软件后，便开始照着官网教程http://spark.apache.org/docs/2.3.0/开始依葫芦画瓢😑 最先接触RDD(resilient distributed dataset,弹性分布式数据集)，如其名一般，专为分布式计算而生的一种数据类型。但是它有一个比较明显的缺点，就是不知道RDD数据里到底是什么，也可能我刚入门的原因。 DataFrame确实可以提供详细的信息，使用Spark SQL可以知晓数据内容，与之前在Pandas里的DataFrame名字一样，是不是有某种联系😵 Datasets是支持scala或者java开发的数据API，看大佬博客里解析说Datasets其实也就是DataFrame的一个特例，那么好吧，先暂时放弃你😂毕竟学Scala或者Java都挺费劲的，我还是多研究支持多种语言接口的DataFrame吧 未完待续…]]></content>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark安装配置]]></title>
    <url>%2F2018%2F07%2F23%2FSpark%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[背景 这是论文的坑😢到现在小论文还没有着落，沦落到害怕能不能毕业了😣 积极的想法：趁这个机会对大数据工作有所了解，找工作的时候又可以多以一个吹的话题了。 安装 安装Spark前必须要安装3个软件：JDK、Scala、Hadoop，一定要注意各个软件的安装与配置，否则直接影响Spark能否成功安装。 这里提一下，建议所有的软件都安装在没有空格的路径里，比如D:\Programe files就很可能报错。 JDK Java环境，必须安装1.8版本以上。之前电脑上本来就有JDK环境，不过是1.7的，一开始没在意，导致后面Spark安装后出现乱码的情况。所以一定要更新到1.8以上。 安装步骤很简单直接下载对应系统版本的msi文件，一路next，自动帮你配置好环境。 Windows系统64位1.8版本JDK安装包jdk-8u181-windows-x64： 链接：https://pan.baidu.com/s/1NhA5L3py-GOT-ejNbLxF6Q 密码：06da 检验是否安装成功： Scala Scala的版本一定要跟Spark相匹配，Spark下载官网明确指出： 1Note: Starting version 2.0, Spark is built with Scala 2.11 by default. Scala 2.10 users should download the Spark source package and build with Scala 2.10 support. 2.0版本及以上的Spark都是默认以Scala2.11版本为基础的，所以下载Scala的时候也要选择对应的版本。 Windows系统64位scala-2.11.7msi安装包： 链接：https://pan.baidu.com/s/1PH56iYE6qxDo9VyIvbogCA 密码：nkzq 跟JDK一样，因为都是MSI文件安装，不需要管PATH路径的问题。 检验是否安装成功： Spark 这里可以先安装Spark,再安装Hadoop。 Spark都是压缩安装包，选择spark-2.3.0-bin-hadoop2.7： 链接：https://pan.baidu.com/s/1Kz1iPGhEqfWMeax0mz7E0A 密码：23ii 下载好后解压到SPARK_HOME目录(自定义，不建议有空格的路径)，添加环境变量： 检验是否安装成功： Hadoop 之前安装Spark的时候，安装包的名字spark-2.3.0-bin-hadoop2.7明确指出了适配hadoop2.7版本的Hadoop。 下载hadoop-2.7.6.tar安装包，解压到指定目录。 链接：https://pan.baidu.com/s/1oAc7LYNSi_F70AjK7NTfAQ 密码：q1nv 因为Hadoop的bin目录下没有winutils.exe文件，可能还会报一个错误，解决方案： 下载hadoop win工具 地址：https://github.com/srccodes/hadoop-common-2.2.0-bin 将winutils.exe复制到 D:\software\hadoop-2.7.6\bin目录下 设置环境变量这个是大坑，很多教程里都会教你设置环境变量以及复制hadoop.dll文件但是按照http://spark.apache.org/docs/2.3.0/quick-start.html 官网给的example练习时 1textFile = spark.read.text(&quot;README.md&quot;) 报错😢之前sc的例子没有问题，也是新手的缘故，不懂原理，依葫芦画瓢，报错内容如下： 1java.lang.UnsatisfiedLinkError:org.apache.hadoop.io.nativeio.NativeIO$Windows.createDirectoryWithMode0(Ljava/lang/String;I)V; 解决方案：删除HADOOP环境变量，删除目录C:\WINDOWS\system32\以及Hadoop安装目录下的hadoop.dll 详细解释：http://www.cnblogs.com/lovegmail/p/6053945.html 配置 Jupyter notebook+Pyspark 数据分析工具利器——Jupyter notebook 它实际就是一个类似IDE的东西，特点： 方便快捷，浏览器随时打开使用，无需等待，尤其是跟PyCharm相比。 便于梳理思路，它独特的cell方式，可以让每一步的结果显示在页面上，并不会覆盖后序的步骤，有利于数据分析工作的呈现。 而我安装使用Spark的目的，也就是用它实现大数据的分析工作，原本单机环境，最多跑个几千条数据就OUTOFMEMORY了😴 前提： 必须已经安装了Jupyter notebook。 设置环境变量，名称和值对应如下： 配置完成后就可以在CMD中输入pyspark，自动弹出浏览器使用pyspark啦😂]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode作战计划]]></title>
    <url>%2F2018%2F06%2F19%2FLeetCode%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[总规划 论文初稿完成，目前处于投递期刊状态😐看看各大公司招聘预告😱7月中旬开始校招，想想真是没时间喘息啊🙅是时候好好规划下了 原计划 预期4周的时间完成LeetCode绝大部分题型，熟悉总结解题规律，到7月中旬就可以尝试去参加笔试面试了😝 123406/19--06/24: 数组(10)、动态规划(10)06/25--07/01: 字符串(10)、数学(10)07/02--07/08: 哈希表(10)、树(10)07/09--07/15: 深度优先搜索(10)、二分查找(5) 目前的计划表就是这样，后期看情况调整，每周日来此汇报进度，并针对每种题型单独写博客整理解题思路。 按照上面的计划执行LeetCode一周后，每周做两组题型对我来说，难度颇大，没办法按时完成任务😔参考网上意见后决定暂时放弃LeetCode路线，LeetCode适合原本就是编程大神的人或者工作过一段时间的，并不适合小白类型的选手😲 决定换牛客网了，补充下基础知识，再去做算法题。牛客网有数据结构、算法等基础知识相关的选择题，做一做选择题复习下基础知识，还有招聘真题，牛客网应该更适合我循序渐进得准备笔试。 新规划 2018/6/25 12306/25--07/01: [数据结构]树、栈；[算法]排序(5)07/02--07/08: [数据结构]图、链表；[算法]复杂度(5)07/09--07/15: [数据结构]哈希、队列；[算法]查找(5) 总结 数据结构 划分依据 数据类型 举例 集 合 无逻辑关系 逻辑 线性结构 一维数组、队列、栈 非线性结构 树、图、网 顺序存储结构 存储 链式存储结构 索引存储结构 散列存储结构 数组 日期：2018/06/22 16:15 一共13道题目，每道题目中往往结合固定几种方法解题，规律性较强，总结题目、标签对应如下： 题号 数组 哈希表 双指针 二分查找 分治算法 1 ★ ★ 4 ★ ★ ★ 11 ★ ★ 15 ★ ★ 16 ★ ★ 18 ★ ★ ★ 26 ★ ★ 283 ★ ★ 448 ★ 485 ★ 561 ★ 566 ★ 766 ★ 由此可以看出，数组类型的题目常与双指针、哈希表方法相结合。 统计完成情况： 13题中通过5题，正确率只有38%😭其中6道双指针题目，只会其中1题，双指针类型题目错误率占比38%😶也就是说数组题目中基本碰到双指针就基本都不会😶😶😶 题号 完成情况 1 ★ 4 ★ 11 题目旨意模糊，答案为返回最大容量 15 不会去重 16 无法将想法转换为编程语言 18 复杂 26 题目旨意模糊，不需要删除重复项，只要没有引用到即可 283 ★ 448 ★ 485 思路 561 ★ 566 特别函数 766 思路 特殊函数 第566题用到的两个函数，平常用的比较少： 1.降低数组维度 1sum([[1,2], [3,4]], []) 输出： 1[1,2,3,4] 2.压缩函数zip() 常规考虑 1.对部分数组题目进行排序操作，可以减少程序运行时间，降低复杂度。 1nums.sort() 树 日期：2018/06/27 20:57 转战牛客网后的第一次总结，牛客网上可以更好地巩固复习基础知识，选择题的正确率在55%左右。 基础知识 树形结构属于非线性结构、层次结构，可以顺序存储或者链式存储，操作有遍历和查找。属于“一对多”的数据类型。 森林指m棵互不相交的树的集合。 二叉树是有序的，特殊的二叉树： 满二叉树 完全二叉树 叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。 哈夫曼树(最优二叉树) 二叉树中的关键概念： 度 即结点的子树个数 度为0的结点为叶子结点 度为1的结点有1个分支 度为2的结点有2个分支 二叉树中不存在度大于2的结点 总结点数总比总度数多1 二叉树的度数与结点数 假设总度数：k，叶子结点、度为1和度为2的结点个数分别即为$n_0,n_1,n_2$ 度：$k = n_2 \times 2 + n_1$ 结点：$k+1 = n_2 + n_1 + n_0$ 综合二式：$n_0 = n_2 + 1$ 二叉树的高度与结点数 高度为h的二叉树，每层最多有$2^{h-1}$个结点。 对于高度为h满二叉树，其总结点数$2^h-1$。 具有N个结点的完全二叉树的高度h为$(\log_2 N)+1$ 二叉树的遍历 遍历 顺序 先序 根→左子树→右子树 中序 左子树→根→右子树 后序 左子树→右子树→根 层次 从上到下，从左到右 遍历经常出的选择题型： 已知两种遍历顺序，例如中序和后序，要求确定一棵二叉树。 首先后序可以确定根结点，结合中序，区分左子树和右子树。再分别针对左子树和右子树，集合中序和后序，慢慢还原一棵二叉树。 编程的题目还没有得到有效训练，LeetCode由于对树有内部编码，与本地自己实现的编程有差异。 哈夫曼树(最优二叉树) 带权路径最短的二叉树。$$WPL=\sum_{i=1}^{n} {W_i}{I_i}$$其中，二叉树共有n个叶子结点，$W_i$:第i个叶子结点的权，$I_i$:根到第i个叶子结点的路径长度。 哈夫曼编码 需要编码的字符集合为{$C_1,C_2,…,C_n$}，各个字符在电文出现的次数集合为{$w_1,w_2,…,w_n$}，用$C_1,C_2,…,C_n$作为叶子，$w_1,w_2,…,w_n$作为各叶子的权构造一棵哈夫曼树。 哈夫曼树中，左分支上标0，右分支上标1，$C_i$的编码顺序为从根到该叶子结点$C_i$的顺序。 几种转换 树转换为二叉树 由于普通的树是无序的，将其转换为二叉树的步骤： 加线：所有兄弟结点之间加一条线 抹线：对树中的每一个结点，只保留它与第1个孩子结点之间的连线，删除它与其它孩子结点的连线 旋转：把虚线改为实线从水平方向向下旋转45°形成二叉树。 森林转换为二叉树 森林由若干棵树组成。 先把每棵树转换为二叉树 第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子结点，用线连接起来。当所有的二叉树连起来后得到的二叉树就是由森林转换得到的。 栈 日期：2018/07/03 23:00 基础知识 栈和队列都是特殊的线性表，只能有部分操作的线性表。 特点：插入和删除操作都在线性表的一端(栈顶)进行，即按“后进先出”的规则进行操作。 top指针永远指向栈顶： 空栈：top=-1 满栈：top=n(n为数组大小) 每压入1个元素进栈，则指针+1 存储 顺序栈 必须预先分配固定大小内存空间。 静态分配内存容易出现浪费空间或者上溢的情况。 链栈 动态结点分配消除存储空间上的限制，避免“栈上溢”错误。 出栈顺序 入栈顺序:ABCDEF，如果没有特别指明，可能指示： A入栈，A出栈，B入栈，B出栈等 前缀表达式 前缀表达式的计算机求值特点： 从右至左扫描表达式 遇到数字时，将数字压入堆栈 遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算，并将结果入栈 重复上述过程直至表达式最左端 最后运算得出的值即为表达式的结果(中缀结果) 汉诺塔(Hanoi) 涉及递归与栈的知识。 题目：4个圆盘的Hanoi塔,总的移动次数为多少？ 设f(n)为n个圆盘的hanoi塔总的移动次数， 其递推方程为f(n)=f(n-1)+1+ f(n-1)=2*f(n-1)+1。 理解就是先把上面n-1个圆盘移到第二个柱子上(共f(n-1)步）， 再把最后一个圆盘移到第三个柱子(共1步）， 再把第二柱子上的圆盘移动到第三个柱子上（共f(n-1)步）。 而f（1）=1；于是f(2)=3,f(3)=7,f(4)=15。 进一步，根据递推方程其实可以得出f(n) = 2^n - 1。 复杂度 时间复杂度 用栈顶指针表示栈顶，栈的插入和删除操作均在栈顶进行。 因此对于顺序存储和链式存储的栈，进行插入和删除运算的时间复杂度均为O(1)。 空间复杂度 卡特兰数 题目：若一序列的进栈顺序为A,B,C,D,E,问存在多少种可能的出栈序列？ $$f(n)=\frac{C_{2n}^n}{n+1}$$ 如上题，答案应为42。 算法 排序 日期：2018/07/04 21:31 分类 插入排序 不到最后一轮排序，存在完全变换序列位置的可能性。 直接插入排序 稳定排序方式。 折半插入排序(二分插入排序) 不太理解，也是稳定的排序方式。 希尔排序(缩小增量排序) 不稳定的排序方式。 交换排序 冒泡排序 冒泡排序最多要交换n(n-1)/2次。 两两比较和交换，是一种稳定的排序方式。 快速排序(划分排序) 以序列第一个元素为基准，两端各一个指针。 速度最快，但序列有序的情况下，反而插入排序更快。 但是一种不稳定的排序方式。 选择排序 简单选择排序 每一趟选出最小的，是一种不稳定的排序方式。 - 树形选择排序 从叶子节点开始，兄弟节点之间两两比赛，胜者上升到父节点。 是一种不稳定的排序方式。 堆排序 大根堆：从上到下-从大到小 小根堆：从上到下-从小到大 是一种不稳定的排序方式。 归并排序 最常见的是二路归并排序。 是一种要求内存最大、稳定的排序方式。 基数排序 多关键字排序 是一种稳定的排序方式。 链式基数排序 是一种稳定的排序方式。 外部排序 基本方法 多路归并排序 置换-选择排序 归纳表]]></content>
      <categories>
        <category>IT应聘</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>牛客网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随记-论计划的重要性]]></title>
    <url>%2F2018%2F05%2F30%2F%E9%9A%8F%E8%AE%B0-%E8%AE%BA%E8%AE%A1%E5%88%92%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%2F</url>
    <content type="text"><![CDATA[回首 研究生生涯已过大半，学生生活也无多时日了，即将到来的招聘季，也预示着新生活的到来。 今天发出这感慨，全是由于昨日师姐的谢师宴，得知我错过了发SCI副刊的机会。期刊给老师的约稿，其实就是给老师一个版面，我的论文完全是有机会的，然而我却这样失之交臂。 总结下来，原因有二： 1.自信息缺乏，从老师发给我约稿文件，看明白是SCI之后，我就打心里觉得我不行，我肯定够不上SCI的门槛😔所以前期也没有积极问老师相关信息，直至昨日氛围轻松的饭局上，才得知这是比自己发中文核心还容易的事。 2.主次不分，一直有这个毛病，分不清孰重孰轻，眼光局限，明明努力一下可以发SCI的却把宝贵的大半个月时间浪费在其他事情上。 总是看着别人取得的优秀成绩，羡慕别人又讨伐自己，看似每日用功读书，实则浑浑噩噩，没有目标，没有计划。不知到毕业最后谢幕，我的简历上会呈现何番模样？我的研究生生活丰富与否？三年前的选择对不对？😕😕😕 研究生履历： 2016年9月-2017年6月：研一在校上课 2017年7月-2017年12月：Splunk实习 2018年1月-2018年5月：完成第一篇小论文 展望 接下来到８月底找工作，我还有满打满算３个月时间来准备扩充的我的知识库，准备招聘。 2018年6月-2018年8月计划： 1.将第一篇小论文投中文核心 2.写第二篇小论文投校报 3.准备招聘笔试题目 4.数据分析技能综合培养 5.开发完整的数据分析项目]]></content>
      <categories>
        <category>生活随记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git问题备忘]]></title>
    <url>%2F2018%2F05%2F29%2FGit%E9%97%AE%E9%A2%98%E5%A4%87%E5%BF%98%2F</url>
    <content type="text"><![CDATA[更新本地库 在LeetCode上，每做完一道题目，为方便后续回顾，同步远程Github。 123git add 需要同步的文件git commit -m &quot;备注&quot;git push -u origin master 远程仓库与本地仓库冲突 由于在远程仓库创建过新文件，导致与本地仓库版本冲突无法合并： 12345678$ git push origin masterTo github.com:sunflowerJY/LeetCode.git ! [rejected] master -&gt; master (non-fast-forward)error: failed to push some refs to &apos;git@github.com:sunflowerJY/LeetCode.git&apos;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details. 解决方案： http://www.cnblogs.com/daemon369/p/3204646.html]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优化Next主题博客]]></title>
    <url>%2F2018%2F05%2F15%2F%E4%BC%98%E5%8C%96Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[在上篇博文中已经搭建好一个基础的可用的博客了，但是热爱折腾的我们怎么可能就此满足😎此文将介绍我的博客折腾之路~ 环境 系统：Win10 64位 Git: 2.17.0.windows.1 Node.js: 8.11.1 npm: 5.6.0 Hexo: 3.7.1 Next: 5.1.4 Next主题 选择一个自己可心的主题，会增强更博的动力哟😜 下载Next主题 在Git bash终端执行以下命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 本文使用的是Next: 5.1.4，目前已经更新至6.0,由于自己还是新手，基本搭建过程都是参考大神博客的，所以以后熟练了再更新吧😂 下载成功后可以在本地博客站点的主题文件夹/themes中除了默认的landscape文件夹，还多了一个next文件夹。 使用Hexo搭建博客时，由于在多个文件夹中存放了_config.yml配置文件，为表述方便，规定： 1.站点配置文件：sunflowerJY.github.io/_config.yml 2.主题配置文件：sunflowerJY.github.io/themes/next/_config.yml 启用Next主题 打开站点配置文件，找到theme字段，并将其值更改为 next。 1theme: next 预览Next风格的本地博客 在Git bash终端执行： 1hexo s 不知为何，我的hexo命令在站点文件夹以外的目录使用会报错找不到该命令，故我都会在站点根目录执行上述命令。 在浏览器中访问 http://localhost:4000/ 便可预览本地博客效果。❤️ 修改Next主题的Scheme Next主题的默认Scheme是Muse,效果如先上图。本博客使用的是Pisces，编辑主题配置文件中的Scheme字段修改Next主题的风格： 1scheme: Pisces 修改网站的基本信息 修改站点配置文件： 12345678# Sitetitle: 向日葵的自留地subtitle:description:keywords:author: sunflowerJYlanguage: zh-hans #汉语timezone: 修改微博底部添加访客数 themes/next/layout/_partials/footer.swig删除多余信息，保留如下信息： 12345678910111213141516171819202122&lt;div class=&quot;copyright&quot;&gt;&#123;##&#125;&#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;&#123;##&#125;&amp;copy; &#123;% if theme.footer.since and theme.footer.since != current %&#125;&#123;&#123; theme.footer.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;&#123;##&#125;&lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt; &lt;span class=&quot;with-love&quot;&gt; &lt;i class=&quot;fa fa-&#123;&#123; theme.footer.icon &#125;&#125;&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright || config.author &#125;&#125;&lt;/span&gt; &#123;% if theme.post_wordcount.totalcount %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-area-chart&quot;&gt;&lt;/i&gt; &lt;/span&gt; &#123;% if theme.post_wordcount.item_text %&#125; &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&apos;post.totalcount&apos;) &#125;&#125;&amp;#58;&lt;/span&gt; &#123;% endif %&#125; &lt;span title=&quot;&#123;&#123; __(&apos;post.totalcount&apos;) &#125;&#125;&quot;&gt;&#123;# #&#125;&#123;&#123; totalcount(site, &apos;0,0.0a&apos;) &#125;&#125;&#123;# #&#125;&lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt; 在上面copyright代码前添加： 1&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 在最后添加： 12345&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 简化后的微博底部效果如下： 添加头像 修改主题配置文件中的avatar,值设置为头像的链接： 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gif（新建 uploads 目录若不存在）avatar: /images/avatar.jpg 配置完成部署更新后便可以在HOME页看到自己的头像啦😃 设置网站图标 将图片在ico图片生成网站上分别生成16x16和32x32的图表，并改名为favicon-16x16-sunflower.ico和favicon-32x32-sunflower.ico，并放到/themes/next/source/images中，修改主题配置文件的small和medium字段： 1234567favicon: small: /images/favicon-16x16-sunflower.ico medium: /images/favicon-32x32-sunflower.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 效果如图： 添加动态背景 Next主题版本》=5.1.1可以直接在主题配置文件修改： 12# Canvas-nestcanvas_nest: true 添加顶部加载条 修改主题配置文件将pace: false改为pace: true，还可以换不同风格的加载条： 添加分类和标签 分类(Categories)和标签(tags)能够很好得将博客文章进行分类管理，方便查阅归类。 添加分类 在博客文件夹下，执行： 1hexo new page categories 自动在/source/categories/文件下创建index.md文件: 1234 ---title: 分类date: 2018-05-15 15:39:08--- 如果有集成评论服务，分类页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，修改后的index.md： 123456---title: 分类date: 2018-05-15 15:39:08type: &quot;categories&quot;comments: false--- 修改菜单： 在菜单中添加链接。编辑主题配置文件， 添加categories到menu中，如下: 1234menu: home: / archives: /archives categories: /categories 添加标签 在博客文件夹下，执行： 1hexo new page tags 自动在/source/tags/文件下创建index.md文件: 1234 ---title: 标签date: 2018-05-15 15:39:08--- 如果有集成评论服务，标签页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，修改后的index.md： 123456---title: 标签date: 2018-05-15 15:39:08type: &quot;tags&quot;comments: false--- 修改菜单： 在菜单中添加链接。编辑主题配置文件， 添加tags到menu中，如下: 1234menu: home: / archives: /archives categories: /tags 修改标签图标 Next主题中设置了标签后，默认在文章最底部显示#，后面接文章所有的标签。总是觉得#这个标识丑丑的😂😂😂还是改一下吧 修改/themes/next/layout/_macro/post.swig：搜索rel=&quot;tag&quot;&gt;#,将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;，效果图： 添加本地搜索 安装hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-search --save 编辑站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： 1234local_search: enable: true trigger: auto top_n_per_article: 1 修改首页摘要 修改主题配置文件： 123auto_excerpt: enable: true length: 150 修改文内链接式样 在/themes/next/source/css/_common/components/post/post.styl文末添加： 1234567891011// 文章内链接文本样式.post-body p a&#123; color: #FF6600; border-bottom: none; border-bottom: 1px solid #FF6600; &amp;:hover &#123; color: #FF6600; border-bottom: none; border-bottom: 1px solid #FF6600; &#125;&#125; 其中，.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义，效果如图： 添加emoji表情包 把原来的hexo渲染换成基于markdown-it的渲染: 12npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it --save 在站点根目录node_modules\hexo-renderer-markdown-it\下安装markdown-it-emoji插件： 1npm install markdown-it-emoji --save 编辑站点配置文件，添加如下内容： 12345678910111213141516171819202122# markdown-it配置emoji表情包markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji #用emoji插件 anchors: level: 1 collisionSuffix: &apos;v&apos; permalink: true permalinkClass: header-anchor permalinkSymbol: &apos;&apos; 然后就可以在写博的时候加上emoji表情啦😄 添加Gitment评论系统 注册OAuth Application 登陆Github官网，进入https://github.com/settings/developers: 点击绿色Register a new application，填写以下内容： 点击绿色Register application,可获得Client ID、Client Secret。 创建Github仓库 创建一个仓库存放评论，仓库名：gitment-comments 修改主题配置文件 12345678910111213141516# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: true mint: true count: true lazy: false cleanly: false language: github_user: sunflowerJY #Github用户名 github_repo: gitment-comments #仓库名 client_id: 5321cd82f4205f8b784e client_secret: 50caad7a61fb5f6d84fc9a66653e6ff625d1db57 proxy_gateway: redirect_protocol: 上述信息中除了github_user、github_repo、client_id、client_secret需要注意外，其他信息均可默认不改。 部署到博客查看效果： 1hexo d 初始化本文的评论页 使用评论功能要登陆Github账号，登陆后点击初始化本文的评论页。 💔由于文章标题过长的原因，可能会报错Error：validation failed: 修改/themes/next/layout/_third-party/comments/gitment.swig文件中标亮的代码： 用文章的时间替代标题标识评论，避免了标题超出50个字符的问题。 管理评论 在gitment-comments的Issues中可以集中管理博客所有文章的评论。 添加萌宠 给孤独写博人来个伴儿吧😬这里有各种各样的宠物,pick一个心水的萌宠吧😉 安装模块： 1npm install --save hexo-helper-live2d 下载一个宠物包, 以我博客中的黑猫为例： 1npm install live2d-widget-model-hijiki 站点配置文件中添加以下字段： 1234567891011121314151617# live2d live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-hijiki/ display: position: left width: 80 height: 300 hOffset: 20 #水平相对位移 vOffset: -200 #垂直相对位移 mobile: show: true 其中，注意model.use填写自己下载的宠物包名字。 Hexo-admin一站式写博部署 写第一篇博文的时候，总是纠结困惑排版的问题，网上也有很多推荐的Markdown编辑器，但是由于种种原因，和部署到Github Pages还是会有很多本地没有出现的问题。直到偶然之间，发现Hexo-admin这个插件，可以直接在本地http://localhost:4000/admin/ 写博客，并实时查看排版效果，比如我正在书写的这篇博文： 点击红圈的位置，可以实现实时本地预览： 一键式部署到Github Pages,还可以顺带部署信息，方便以后版本查阅: 是不是和Github Pages用起来无缝连接😉以下实现步骤： 安装插件： 1npm install --save hexo-admin 本地运行,打开http://localhost:4000/admin/ ： 1hexo server -d 💔上述的Deploy可能第一次使用会报错，解决方案如下： 编辑站点配置文件，搜索admin字段修改如下： 123# hexo-admin admin.deployCommandadmin: deployCommand: &apos;sh hexo-deploy.sh&apos; 在站点根目录下新建hexo-deploy.sh文件，内容如下： 1hexo g -d 编辑站点根目录下node_modules/hexo-admin/deploy.js文件，修改标亮处： 1var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]); 安装图床插件 目前上传图片至千牛网生成外链，复制到博客的html语言生成图片，知道有hexo-qiniu-sync这么一个插件能够化繁为简，去除重复劳动，使得在博客中添加图片更方便。但是一直安装配置存在问题，导致该插件无法使用，并且导致基本的hexo-clean、hexo s等命令也报错。 很无奈，未完待续。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>emoji</tag>
        <tag>Gitment</tag>
        <tag>Hexo-admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages + Hexo搭建博客填坑实记]]></title>
    <url>%2F2018%2F05%2F13%2FGithub%20Pages%20%2B%20Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91%E5%AE%9E%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[背景 从实习结束，开始正儿八经看论文的时候，开始萌生了写博的想法。研一寒假在家不想看论文刷LeetCode的时候，学习了很多大神优秀的解法，却奈何下次遇到类似的方法还是困惑，便想找个地儿记录下来。 一开始选择了博客网站——类似博客园或者CSDN之类的，图形界面，操作简便，但存在广告，排版杂乱的问题。无疑之间发现了Markdown——写博利器，简洁明了，兼容Jupyter Notebook，同时显示代码和文字说明，非常适合数据分析工作。 这是我的博客成品：https://sunflowerjy.github.io/ 搭建此博客步骤很简单，顺利的话最快半小时就能搭建成功。然而标题是填坑实记，一看就是有故事的人😑故事听我娓娓道来~ 环境 系统：Win10 64位 Git: 2.17.0.windows.1 Node.js: 8.11.1 npm: 5.6.0 Hexo: 3.7.1 30分钟搭建最基础博客 写在最前面，提示：此步骤只适合环境与我一样，因为之前我也是参考别人分享的博文，然而由于各种软件的更新导致很多步骤都会报错，所以后期有可能由于软件更新而导致按照本文的方法安装配置出现错误。 安装Git Git的下载地址(Windows版本)：https://git-scm.com/download/win 选择适合自己系统的版本。 除了以下两个步骤以外，都可以默认选择Next(下一步): 如何使用Git? 标注 1：仅使用 Git Bash 进行操作； 标注 2：在选择使用 Git Bash 进行操作的同时，也可以使用 Windows 命令行操作，建议选择此项； 标注 3：在选择使用 Git 的同时，也把 Unix 工具加入到了我们的配置之中，而且此操作会覆盖 Windows 的一些工具，强烈不建议选择此项。 关于回车换行的问题 Dos和Windows采用回车+换行CRLF表示下一行，而Unix/Linux采用换行符LF表示下一行。 第一个选项是默认检查Windows风格的文件，并在提交时转换为Unix风格。 请选择第三项。如果默认选择第一项，在git中提交代码可能会报错。不过可以安装好之后再更改相关配置。若后续commit报错请参考搭建博客遇到的各种坑的详细介绍。 检验Git是否安装成功： 安装成功后，可以在桌面鼠标右键找到Git bash： 安装Node.js Node.js下载地址：https://nodejs.org/en/download/ 选择自己对应系统的版本。一路默认Next安装。 新版本的Node.js中集成了npm工具，故不需要再另外安装。 检验Node.js和npm是否安装成功： 安装Hexo 1npm install hexo-cli -g 检验Hexo是否安装成功： 本地搭建博客 在本地计算机新建一个文件夹存放博客代码： 1hexo init sunflowerJY.github.io 我存放博客代码的文件夹名：sunflowerJY.github.io 生成静态文件： 1hexo g # 或者hexo generate 在sunflowerJY.github.io文件夹下生成public文件夹存放静态文件。 启动本地Web服务： 1hexo s # 或者hexo server 现在可以在本地查看自己搭建的博客啦😃http://localhost:4000 关联Github 注册Github账号 Github官网：https://github.com/ 注册过程跟大部分网站相似，尤其注意注册邮箱user.email和用户名user.name,后期部署博客要用到并且必须一字不差，这也是遇到的坑之一😂 用户名： 创建Github仓库 创建Github仓库来远程保存备份本地的博客代码。 这里再强调下，仓库名必须命名为用户名.github.io，之前由于我没有严格遵守用户名这一点，导致部署到Github的博客css等文件无法识别😩折腾了好久还是别人帮我检查到的😂 由于我的博客仓库已经搭建过所以提示报错已存在该仓库，新创建的不会报错。 开启Github Pages功能 打开博客仓库的Setting页面： 拉至Github Pages选项，将Source选择master分支： 可能会提示仓库为空，要先添加文件，请将本地的博客push到该远程仓库。熟悉Git命令的请跳过，否则参考上传本地博客仓库至远程仓库 配置Git账号信息 设置git的全局账号信息，user.name为Github用户名，user.email为Github注册邮箱。 12git config --global user.name &quot;sunflowerJY&quot;git config --global user.email &quot;sunflower_jy@icloud.com&quot; 查看Git的所配置信息： 1git config --list 配置SSH 查看本地的SSH Key，桌面右键进入Git bash： 1ls -al ~/.ssh 若有id_rsa和id_rsa.pub两个文件，则复制id_rsa.pub中内容至Github设置中。 New SSH Key: 将id_rsa.pub中的内容复制到Key中： 验证SSH是否配置成功： 1ssh -T git@github.com 成功的话会显示以下的大致内容： 123456The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;github.com,192.30.252.128&apos; (RSA) to the list of known hosts.Hi sunflowerJY! You&apos;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 上传本地博客仓库至远程仓库 在Git bash中cd到本地博客文件夹sunflowerJY.github.io： 123git initgit add .git commit -m &quot;first commit blog&quot; 修改配置文件部署部分 修改本地博客文件夹sunflowerJY.github.io中的_config.yml： 其中，repo填写自己的仓库地址，主要修改对应的用户名位置。 安装Deploy工具 1npm install hexo-deployer-git --save 部署至Github 1hexo d#或hexo deploy 至此已经成功搭建了自己的博客，快去查看自己的专属博客吧💕https://用户名.github.io 搭建博客遇到的各种坑 其实在上一节30分钟搭建最基础博客中基本都已经提及了，现在来总结下吧 关于回车换行的问题 上一节在安装Git中提到过，由于Windows和Linux的换行规则不一样，所以为了确保在将Windows平台上的文件commit至Github时能正常使用，Git给出了自动转换文件格式的服务，即下图中的第一个选项。若默认选择了这项Next,后序在使用Git的过程中可能会报crlf与lf文件转换的WARN。 解决方案： 如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中： 1git config --global core.autocrlf false Github仓库名 Github仓库名必须以用户名.github.io的形式命名，用户名那里要一字不差，不然后期的css等文件渲染会有问题，一开始我没注意到这个问题导致博客打开傻眼了，白花花的一片只有字😱💥😢 开启Github Pages功能 如果仓库内没有文件，页面上会提示无法开启Github Pages功能，可以参照上传本地博客仓库至远程仓库。随即仓库中有文件后，便可开启Github Pages功能。 搭建博客遇到的各种坑这块内容我会一直保持更新。随时记录，方便有需要的人，也方便自己备忘😂 关于博客的内容后续还会更新，例如打造个性化的博客,如有需要请关注教程标签。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Github Pages</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
